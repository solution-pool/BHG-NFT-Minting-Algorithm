data:text/html;base64,<canvas id="canvas"></canvas><script>// Those variables contain the trait of the coral.

const SIZE          = 600       // Growth size
const CO = 7
const RYTHM         = 2         // Growth RYTHM

// Those are the config value that the algorithm uses. Do not modify this value or the coral will be changed unexpectedly.

const INDEX         = 681
const RS      = SIZE

const NMAX          = 10 ** 4
const ONE           = 1 / RS

const STP           = ONE
const NEARL         = 6 * ONE
const FARL          = 60 * ONE
const INIT_RAD      = 4 * ONE
const INIT_NUM      = 3
const MID           = 0.5
const TWOPI         = 2 * Math.PI
let FRONT = [[180,0,255],[0,255,180],[255,180,0]]
let BACK = [255,255,255]
class Zonemap{constructor(t){t=parseInt(t);this.VZ=[],this.Z=[],this.vnum=0,this.vsize=RS,this.nz=t,this.total_zones=t*t,this.greatest_zone_size=RS;for(let t=0;t<this.total_zones;t++){let s=[];s.i=t,s.size=RS,s.count=0,s.ZV=[],this.Z[t]=s}}_ac(t,s){this.X=t,this.Y=s}_ad(t){t=parseInt(t);let s=this.vnum;const e=this.X[t],i=this.Y[t],n=this._ai(e,i);this._af(n,s),this.VZ[s]=n;const r=[];return this.vnum>=this.vsize-1&&(this.VZ=r,this.vsize=2*this.vsize),this.vnum+=1,s}_ae(t){return t=parseInt(t),this._ah(this.VZ[t],t),this.VZ[t]=-1,1}_af(t,s){t=parseInt(t),s=parseInt(s);let e=this.Z[t];return null==e&&((e=[]).count=0,e.ZV=[],e.i=0,e.size=SIZE,this.Z.push(e)),e.ZV[e.count]=s,e.count+=1,e.count>=e.size-1?this._ag(e):1}_ag(t){let s=2*t.size;return t.ZV=[],t.size=s,s>this.greatest_zone_size&&(this.greatest_zone_size=s),this.Z.push(t),1}_ah(t,s){t=parseInt(t),s=parseInt(s);let e=this.Z[t];for(let t=0;t<e.count;t++)if(e.ZV[t]==s)return e.ZV[t]=e.ZV[e.count-1],e.count-=1,1;return-1}_ai(t,s){const e=this.nz;return e*parseInt(t*e)+parseInt(s*e)}_aj(t){t=parseInt(t);const s=this.X[t],e=this.Y[t],i=parseInt(this._ai(s,e)),n=parseInt(this.VZ[t]);return n<0?-1:i!=n?(this._ah(n,t),this._af(i,t),this.VZ[t]=i,1):-1}_ak(t,s,e,i){const n=this.nz,r=parseInt(t*n),h=parseInt(s*n);let o=0;const c=e*e;for(let e=Math.max(r-1,0);e<Math.min(r+2,n);e++)for(let r=Math.max(h-1,0);r<Math.min(h+2,n);r++){const h=this.Z[e*n+r];for(let e=0;e<h.count;e++){const n=t-this.X[h.ZV[e]],r=s-this.Y[h.ZV[e]];n*n+r*r<c&&(i[o]=h.ZV[e],o+=1)}}return o}}class Segments{constructor(t,s){this.X=[],_e(this.X,t,0),this.Y=[],_e(this.Y,t,0),this.VA=[],_e(this.VA,t,0),this.VS=[],_e(this.VS,t,-1),this.EV=[],_e(this.EV,2*t,-1),this.VE=[],_e(this.VE,2*t,-1),this.nmax=t,this.vnum=0,this.edgeNumber=0,this.snum=0,this.zonewidth=s,this.nz=1/s,this.nz<3&&(this.nz=1,this.zonewidth=1),this.zonemap=new Zonemap(this.nz),this.zonemap._ac(this.X,this.Y)}_m(t,s){return t<0||t>1||s<0||s>1?-1:1}_n(t,s,e,i){if(this._m(t,s)<0)throw new Error("Vertext outside unit square.");const n=this.vnum;return this.X[n]=t,this.Y[n]=s,this.VA[n]=1,this.VS[n]=e,this.zonemap._ad(n),this.vnum=n+1,n}_o(t,s){return t<0||t>this.vnum-1||this.VA[t]<0?-1:s<0||s>this.vnum-1||this.VA[s]<0?-1:1}_p(t,s){t=parseInt(t),s=parseInt(s);const e=this.edgeNumber;if(this._o(t,s)<0)throw new Error("invalid vertex in _p v1, v2, "+t+","+s);return this.EV[2*e]=t,this.EV[2*e+1]=s,_f(t,e,this.VE),_f(s,e,this.VE),this.edgeNumber+=1,e}_q(t){return this.EV[2*t]>-1&&this.EV[2*t+1]>-1?1:-1}_r(t){return this.VA[t]=-1,this.zonemap._ae(t),1}_s(t){if(t<0||t>this.edgeNumber-1)throw new Error("invalid edge in _s e1"+t);let s=this.EV[2*t],e=this.EV[2*t+1];return this.EV[2*t]=-1,this.EV[2*t+1]=-1,s>-1&&_g(s,t,this.VE),e>-1&&_g(e,t,this.VE),1}_u(t){let s=this.vnum,e=0;for(let i=0;i<s;i++)this.VA[i]>-1&&(t[e][0]=this.X[i],t[e][1]=this.Y[i],e+=1);return e}_v(t){let s=this.X[this.EV[2*t]]-this.X[this.EV[2*t+1]],e=this.Y[this.EV[2*t]]-this.Y[this.EV[2*t+1]];return Math.sqrt(s*s+e*e)}_x(t,s,e,i){let n=[],r=this.snum,h=i.length;for(let o=0;o<h;o++){const h=i[o],c=t+Math.cos(h)*e,a=s+Math.sin(h)*e;n.push(this._n(c,a,r,1))}for(let t=0;t<n.length-1;t++)this._p(n[t],n[t+1]);this._p(n[0],n[h-1]),this.snum=r+1}_y(t,s=-1){if(this._q(t)<0)throw new Error("e1 does not exist");if(t<0)throw new Error("invalid edge in _y e1"+t);let e=this.EV[2*t],i=this.EV[2*t+1],n=this.VS[e];if(n<0)throw new Error("Invalid segment id.");if(s>0){let n=this.X[e]-this.X[i],r=this.Y[e]-this.Y[i];if(n*n+r*r<s*s)throw new Error("edge too short, e1,"+t)}let r=.5*(this.X[e]+this.X[i]),h=.5*(this.Y[e]+this.Y[i]),o=this._n(r,h,n,1);return this._s(t),this._p(e,o),this._p(i,o),1}_aa(t){let s=this.vnum;for(let e=0;e<s;e++){if(this.X[e]<(RS-CS)/2/RS+t||this.X[e]>1-(RS-CS)/2/RS-t)return-1;if(this.Y[e]<(RS-CS)/2/RS+t||this.Y[e]>1-(RS-CS)/2/RS-t)return-1}return 1}_ab(){return this.edgeNumber}}class DifferentialLine extends Segments{constructor(t,s,e,i){super(t,s),this.SX=[],this.SY=[],this.SD=[],this.nearl=e,this.farl=i}_a(t){let s=[];const e=this.vnum;for(let i=0;i<e;i++){this.SX[i]=0,this.SY[i]=0;let e=this.zonemap._ak(this.X[i],this.Y[i],this.farl,s);this._b(i,s,e,t,this.SX,this.SY)}for(let t=0;t<e;t++)this.VA[t]<0||(this.X[t]=this.X[t]+this.SX[t],this.Y[t]=this.Y[t]+this.SY[t]);for(let t=0;t<e;t++)if(!(this.VA[t]<0))try{this.zonemap._aj(t)}catch{}}_b(t,s,e,i,n,r){if(this.VA[t]<1)return-1;let h,o,c=this.VE[2*t],a=this.VE[2*t+1];h=this.EV[2*c]==t?this.EV[2*c+1]:this.EV[2*c],o=this.EV[2*a]==t?this.EV[2*a+1]:this.EV[2*a];let u=0,l=0;for(let n=0;n<e;n++){let e=s[n],r=this.X[t]-this.X[e],c=this.Y[t]-this.Y[e],a=Math.sqrt(r*r+c*c);if(e==h||e==o){if(a<this.nearl||a<=0)continue;u+=-r/a*i,l+=-c/a*i}else{if(a>this.farl||a<=0)continue;u+=r*(this.farl/a-1)*i,l+=c*(this.farl/a-1)*i}}return n[t]+=u,r[t]+=l,1}}function _c(t,s,e){const n=t._ab();let r=[],h=[];for(let t=0;t<n;t++)r.push(Math.random());const o=r.length;for(i=0;i<o;i++)r[i]>e||!r[i]||h.push(i);let c=h.length;for(let e=0;e<c;e++){if(!(t._v(h[e])<s))try{t._y(h[e])}catch(t){continue}}}function _e(t,s,e){for(let i=0;i<s;i++)t[i]=e;return t}function _f(t,s,e){e[2*t]<0?e[2*t]=s:e[2*t+1]=s}function _g(t,s,e){return e[2*t]==s?(e[2*t]=e[2*t+1],e[2*t+1]=-1):e[2*t+1]==s&&(e[2*t+1]=-1),e}function _h(){ctx.fillStyle="rgb("+BACK.toString()+")",ctx.fillRect(0,0,RS,RS)}function _k(t){let s=t.length;for(let e=0;e<s;e++){let s=t[e],i=s[0],n=s[1];!gf||pe?ctx.strokeStyle="rgb("+BACK.toString()+")":CO<5?ctx.strokeStyle="rgb("+FRONT.toString()+")":ctx.strokeStyle="rgb("+cf.toString()+")",ctx.strokeRect(i*RS,n*RS,ONE*RS,ONE*RS)}}let nc,nvc,gf,DF,render,coloroptions,cf;!function(t,s,e,i,n,r,h,o,c){function a(t){var s,e=t.length,n=this,r=0,h=n.i=n.j=0,o=n.S=[];for(e||(t=[e++]);i>r;)o[r]=r++;for(r=0;i>r;r++)o[r]=o[h=V&h+t[r%e]+(s=o[r])],o[h]=s;(n.g=function(t){for(var s,e=0,r=n.i,h=n.j,o=n.S;t--;)s=o[r=V&r+1],e=e*i+o[V&(o[r]=o[h=V&h+s])+(o[h]=s)];return n.i=r,n.j=h,e})(i)}function u(t,s){for(var e,i=t+"",n=0;n<i.length;)s[V&n]=V&(e^=19*s[V&n])+i.charCodeAt(n++);return f(s)}function l(e){try{return p?f(p.randomBytes(i)):(t.crypto.getRandomValues(e=new Uint8Array(i)),f(e))}catch(i){return[+new Date,t,(e=t.navigator)&&e.plugins,t.screen,f(s)]}}function f(t){return String.fromCharCode.apply(0,t)}var p,_=e.pow(i,6),S=e.pow(2,52),m=2*S,V=i-1,g=e["seed"+c]=function(t,n,r){var h=[],o=u(function t(s,e){var i,n=[],r=typeof s;if(e&&"object"==r)for(i in s)try{n.push(t(s[i],e-1))}catch(t){}return n.length?n:"string"==r?s:s+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[t,f(s)]:null==t?l():t,3),h),p=new a(h);return u(f(p.S),s),(n.pass||r||function(t,s,i){return i?(e[c]=t,s):t})(function(){for(var t=p.g(6),s=_,e=0;S>t;)t=(t+e)*i,s*=i,e=p.g(1);for(;t>=m;)t/=2,s/=2,e>>>=1;return(t+e)/s},o,"global"in n?n.global:this==e)};if(u(e[c](),s),h&&h.exports){h.exports=g;try{p=require("crypto")}catch(t){}}else o&&o.amd&&o(function(){return g})}(this,[],Math,256,0,0,"object"==typeof module&&module,"function"==typeof define&&define,"random");let sl,ai,ctx,CS,sc=1,dp=[],pp=[],pn=parseInt(SIZE/RYTHM),ps=!1,pe=!1,pf=!1,ccs=[],ci=0,co=1,fcs=[];function preload(){make_color_store()}function make_color_store(){let t=FRONT[0],s=FRONT[1],e=FRONT[2];if(t[0]>s[0])for(let e=t[0];e>=s[0];e--)ccs.push([e,t[1],t[2]]);else for(let e=t[0];e<=s[0];e++)ccs.push([e,t[1],t[2]]);if(t[1]>s[1])for(let e=t[1];e>=s[1];e--)ccs.push([s[0],e,t[2]]);else for(let e=t[1];e<=s[1];e++)ccs.push([s[0],e,t[2]]);if(t[2]>s[2])for(let e=t[2];e>=s[2];e--)ccs.push([s[0],s[1],e]);else for(let e=t[2];e<=s[2];e++)ccs.push([s[0],s[1],e]);if(s[0]>e[0])for(let t=s[0];t>=e[0];t--)ccs.push([t,s[1],s[2]]);else for(let t=s[0];t<=e[0];t++)ccs.push([t,s[1],s[2]]);if(s[1]>e[1])for(let t=s[1];t>=e[1];t--)ccs.push([e[0],t,s[2]]);else for(let t=s[1];t<=e[1];t++)ccs.push([e[0],t,s[2]]);if(s[2]>e[2])for(let t=s[2];t>=e[2];t--)ccs.push([e[0],e[1],t]);else for(let t=s[2];t<=e[2];t++)ccs.push([e[0],e[1],t])}function init_current_size(){sc=1,RYTHM>2?(CS=RS,step_unit=parseInt(RS/(RYTHM-1)),sl=parseInt(RS/(RYTHM-1))):sl=step_unit=CS=RS}function setup(){let t=document.getElementById("canvas");t.width=SIZE,t.height=SIZE,ctx=t.getContext("2d"),init_current_size(),gf=!0,CO<9&&(ci=0),Math.seedrandom(INDEX+1),cf=FRONT[0],DF=new DifferentialLine(NMAX,2*FARL,NEARL,FARL);let s=[];for(let t=0;t<INIT_NUM;t++)s.push(Math.random()*TWOPI);DF._x(MID,MID,INIT_RAD,s),_h(),draw()}function draw(){cf=ccs[ci],ci>=ccs.length-1&&(co=2),ci<=0&&(co=1),1==co?ci++:ci--,wrap(),SIZE<800?setTimeout(function(){ai=requestAnimationFrame(draw)},1e3/(10+parseInt((SIZE-400)/10))):ai=requestAnimationFrame(draw)}function wrap(){init_coordinates();let t=steps(DF),s=DF._u(nvc),e=nvc.slice(0,s);if(ps)e=pp.shift(),pp.length>=pn*sc?(pe=!0,pf=!1):(pe=!1,pf=!0);else if(gf?dp.push(e):e=dp.pop(),null==e)return void setup();return _k(e),t}function init_coordinates(){nc=new Array,nvc=new Array;for(let t=0;t<NMAX;t++)nc[t]=[0,0,0,0];for(let t=0;t<NMAX;t++)nvc[t]=[0,0,0,0]}function steps(t){if(ps)0==pp.length&&(ps=!1,sc<RYTHM-1?sc++:sc=1,sl=step_unit*sc);else if(gf&&(t._a(STP),_c(t,NEARL,.03)),check_step(sl,t))if(sc<RYTHM-1){ps=!0;let t=dp.length;for(let s=1;s<=pn*sc;s++)pp.push(dp[t-s]);for(let s=pn*sc;s>0;s--)pp.push(dp[t-s])}else 1==RYTHM&&cancelAnimationFrame(ai),gf&&(cancelAnimationFrame(ai),sleep(1e3*parseInt(RYTHM+1)),SIZE<800?setTimeout(function(){ai=requestAnimationFrame(draw)},1e3/(10+parseInt((SIZE-400)/10))):ai=requestAnimationFrame(draw)),gf=!1}function check_step(t,s){CS=t;let e=s._aa(3*STP)<0;return CS=RS,e}function sleep(t){const s=Date.now();let e=null;do{e=Date.now()}while(e-s<t)}preload(),setup();</script>